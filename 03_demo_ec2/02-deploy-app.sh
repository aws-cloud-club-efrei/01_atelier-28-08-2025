#!/bin/bash

# Script pour d√©ployer l'application Demo S3 sur l'instance EC2

set -e  # Arr√™ter le script en cas d'erreur

echo "üì¶ === D√âPLOIEMENT DE L'APPLICATION DEMO S3 ==="
echo "üìÖ Date: $(date)"
echo ""

# V√©rifier que le fichier de configuration existe
if [ ! -f "./instance-config.txt" ]; then
    echo "‚ùå Fichier 'instance-config.txt' non trouv√©."
    echo "üí° Ex√©cutez d'abord './01-configure-instance.sh'"
    exit 1
fi

# Charger les informations de l'instance
source "instance-config.txt"

echo "üìã Configuration de l'instance:"
echo "   üåê IP Publique: $PUBLIC_IP"
echo "   üîë Cl√© SSH: $KEY_FILE"
echo "   üë§ Utilisateur: $SSH_USER"
echo ""

# V√©rifier que la cl√© SSH existe
if [ ! -f "$KEY_FILE" ]; then
    echo "‚ùå Cl√© SSH '$KEY_FILE' non trouv√©e."
    echo "üí° Placez votre fichier de cl√© dans ce r√©pertoire"
    exit 1
fi

# V√©rifier les permissions de la cl√©
chmod 400 "$KEY_FILE"

# Cr√©er le package de l'application
echo "üì¶ Cr√©ation du package de l'application..."
cd ../demo_s3

# Nettoyer les fichiers temporaires
echo "üßπ Nettoyage des fichiers temporaires..."
find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
find . -name "*.pyc" -delete 2>/dev/null || true
find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true

# Cr√©er l'archive TAR
echo "üìÅ Cr√©ation de l'archive..."
tar --exclude="*.git*" --exclude="node_modules/*" --exclude="*.log" --exclude="*.tmp" --exclude="__pycache__" --exclude="*.pyc" -czf ../demo_ec2/demo-s3-app.tar.gz .

cd ../demo_ec2

echo "‚úÖ Package cr√©√©: demo-s3-app.tar.gz ($(du -h demo-s3-app.tar.gz | cut -f1))"
echo ""

# Fonction pour ex√©cuter des commandes SSH
ssh_exec() {
    ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no -o ConnectTimeout=10 "$SSH_USER@$PUBLIC_IP" "$1"
}

# Fonction pour copier des fichiers via SCP
scp_copy() {
    scp -i "$KEY_FILE" -o StrictHostKeyChecking=no -o ConnectTimeout=10 "$1" "$SSH_USER@$PUBLIC_IP:$2"
}

# Tester la connexion SSH
echo "üîå Test de la connexion SSH..."
if ssh_exec "echo 'Connexion SSH r√©ussie'"; then
    echo "‚úÖ Connexion SSH √©tablie"
else
    echo "‚ùå Impossible de se connecter via SSH"
    echo "üí° V√©rifiez:"
    echo "   - L'instance est d√©marr√©e"
    echo "   - Le port 22 est ouvert dans le groupe de s√©curit√©"
    echo "   - L'IP publique est correcte"
    echo "   - Le fichier de cl√© est correct"
    exit 1
fi
echo ""

# Afficher les informations syst√®me
echo "üíª === INFORMATIONS SYST√àME DE L'INSTANCE ==="
echo "üñ•Ô∏è Syst√®me d'exploitation:"
ssh_exec "cat /etc/os-release | grep PRETTY_NAME || cat /etc/issue | head -1"

echo ""
echo "üíæ Espace disque:"
ssh_exec "df -h / | tail -1"

echo ""
echo "üß† M√©moire:"
ssh_exec "free -h | head -2"

echo ""
echo "üêç Version Python:"
ssh_exec "python3 --version 2>/dev/null || python --version"

echo ""
echo "‚è∞ Uptime de l'instance:"
ssh_exec "uptime"
echo ""

# Installer les d√©pendances si n√©cessaire
echo "üîß Installation des d√©pendances..."
ssh_exec "
# D√©tecter le syst√®me d'exploitation
if command -v yum &> /dev/null; then
    # Amazon Linux / CentOS / RHEL
    echo 'üì¶ Installation sur syst√®me bas√© sur RHEL/Amazon Linux...'
    sudo yum update -y
    sudo yum install -y python3 python3-pip tar
elif command -v apt &> /dev/null; then
    # Ubuntu / Debian
    echo 'üì¶ Installation sur syst√®me bas√© sur Debian/Ubuntu...'
    sudo apt update
    sudo apt install -y python3 python3-pip tar
else
    echo '‚ö†Ô∏è Syst√®me non reconnu, tentative d installation manuelle...'
fi

# Installer les packages Python
echo 'üêç Installation des packages Python...'
pip3 install --user flask boto3 python-dotenv || sudo pip3 install flask boto3 python-dotenv

echo '‚úÖ D√©pendances install√©es'
"

# Copier l'application sur l'instance
echo "üì§ Upload de l'application sur l'instance..."
scp_copy "demo-s3-app.tar.gz" "/tmp/"
echo "‚úÖ Application upload√©e"
echo ""

# D√©ployer l'application
echo "üöÄ D√©ploiement de l'application..."

ssh_exec "
echo 'üìÅ Cr√©ation du r√©pertoire d application...'
sudo mkdir -p /opt/demo-s3
sudo chown $SSH_USER:$SSH_USER /opt/demo-s3

echo 'üì¶ Extraction de l application...'
cd /opt/demo-s3
tar -xzf /tmp/demo-s3-app.tar.gz
echo '‚úÖ Application extraite'

echo ''
echo '‚öôÔ∏è Configuration de l environnement...'
# Cr√©er un fichier .env d'exemple
cat > /opt/demo-s3/.env << 'ENV_EOF'
AWS_REGION=eu-west-3
S3_BUCKET_NAME=e-commerce-bucket-acc-efrei
ENV_EOF

echo '‚úÖ Fichier .env cr√©√©'

echo ''
echo 'üîß Test des d√©pendances...'
cd /opt/demo-s3
python3 -c 'import flask, boto3, dotenv; print(\"‚úÖ Toutes les d√©pendances sont disponibles\")' || echo '‚ö†Ô∏è Certaines d√©pendances manquent'

echo ''
echo 'üéØ D√©marrage de l application en arri√®re-plan...'
# Tuer les anciens processus s'ils existent
pkill -f 'python3 app.py' || true
sleep 2

# V√©rifier que nous sommes dans le bon r√©pertoire
pwd
ls -la

# Tester l'application en mode debug d'abord
echo 'Test de l application...'
python3 -c \"
try:
    import sys
    sys.path.insert(0, '/opt/demo-s3')
    from app import create_app
    app = create_app()
    print('‚úÖ Application peut √™tre import√©e')
except Exception as e:
    print(f'‚ùå Erreur d import: {e}')
    import traceback
    traceback.print_exc()
\"

# D√©marrer l'application en arri√®re-plan
echo 'D√©marrage de l application...'
nohup python3 app.py > app.log 2>&1 &
APP_PID=\$!
echo \"Application d√©marr√©e avec PID: \$APP_PID\"

# Attendre un peu et v√©rifier si l'application d√©marre
sleep 10
if ps -p \$APP_PID > /dev/null; then
    echo '‚úÖ Application d√©marr√©e avec succ√®s'
    echo \"PID: \$APP_PID\" > app.pid
    
    # V√©rifier que l'application √©coute sur le port 3000
    echo 'V√©rification du port 3000...'
    if netstat -tlnp 2>/dev/null | grep :3000 || ss -tlnp 2>/dev/null | grep :3000; then
        echo '‚úÖ Application √©coute sur le port 3000'
    else
        echo '‚ö†Ô∏è Application ne semble pas √©couter sur le port 3000'
    fi
    
    # Test local
    echo 'Test de connectivit√© locale...'
    curl -s http://localhost:3000 > /dev/null && echo '‚úÖ Application r√©pond localement' || echo '‚ö†Ô∏è Application ne r√©pond pas localement'
else
    echo '‚ùå Erreur lors du d√©marrage de l application'
    echo 'Logs d erreur:'
    tail -20 app.log
    echo ''
    echo 'Tentative de d√©marrage en mode debug:'
    python3 app.py
fi
"

echo ""
echo "üåê Fin du d√©ploiement, application accessible sur http://$PUBLIC_IP:3000"